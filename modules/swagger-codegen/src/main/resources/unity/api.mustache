using System;
using System.Collections.Generic;
using RSG;

using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.Model;
{{/hasImport}}

namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface I{{classname}}
    {
        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>IPromise<{{{returnType}}}></returns>
        {{#returnType}}IPromise<{{{returnType}}}>{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        {{/operation}}

        /// <summary>
        /// Timeout for the request to the webservice
        /// </summary>
        /// <param name="timeout">in seconds </param>
        void SetTimeout(float timeout);
        /// <summary>
        /// Sets the base path for the request
        /// </summary>
        /// <param name="path"></param>
        void SetBasePath(string path);
        /// <summary>
       /// Add header.
       /// </summary>
       /// <param name="key">Header field name.</param>
       /// <param name="value">Header field value.</param>
       /// <returns></returns>
       void AddHeader(string key, string value);


    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class {{classname}} : I{{classname}}
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <returns></returns>
        public {{classname}}(ApiClient apiClient)
        {
        ApiClient = apiClient;
        }

        public void SetTimeout(float timeout)
        {
            ApiClient.SetTimeout(timeout);
        }

        public void SetBasePath(string path)
        {
            ApiClient.BasePath=path;
        }

        public void AddHeader(string key, string value)
         {
             ApiClient.AddDefaultHeader(key,value);
         }


        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        private ApiClient ApiClient {get; set;}

        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>A Promise with {{#returnType}}{{{returnType}}}{{/returnType}}</returns>
        public {{#returnType}}IPromise<{{{returnType}}}>{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            var promise = new Promise<{{{returnType}}}>();
            {{#allParams}}{{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null) {
              promise.Reject(new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}"));
              return promise;
            }
            {{/required}}{{/allParams}}

            var path = "{{path}}";
            path = path.Replace("{format}", "json");
            {{#pathParams}}path = path.Replace("{" + "{{baseName}}" + "}", ApiClient.ParameterToString({{{paramName}}}));
            {{/pathParams}}

            Dictionary<string, string> queryParameters = null;

            {{#queryParams}}
            // add query parameters
            if ({{paramName}} != null)   {
              queryParameters = new Dictionary<string, string>();
              queryParameters.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}}));
            }
            {{/queryParams}}


            ApiClient.Send<{{{returnType}}}> (path, (response) => promise.Resolve(response), (exception) => promise.Reject(exception) , queryParameters);
            return promise;
        }

        {{/operation}}
    }
    {{/operations}}
}
